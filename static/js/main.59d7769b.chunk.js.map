{"version":3,"sources":["components/HomePage.tsx","components/NotFoundPage.tsx","components/Header.tsx","services/api.ts","components/PeopleTable/PeopleTableHeaders.tsx","components/PeopleTable/PeopleTableRow.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage.tsx","App.tsx","index.tsx"],"names":["HomePage","className","NotFoundPage","Header","href","src","alt","to","exact","activeClassName","BASE_URL","getPeople","a","fetch","then","data","json","people","map","person","father","find","name","fatherName","mother","motherName","PeopleTableHeaders","PeopleTableRow","sex","born","died","PeopleTable","slug","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","getPeopleFromServer","peopleInfo","useAsyncEffect","shouldShowPeopleTable","max","App","path","ReactDOM","render","document","getElementById"],"mappings":"iOAEaA,EAAe,kBAC1B,oBAAIC,UAAU,WAAd,wBCDWC,EAAmB,kBAC9B,oBAAID,UAAU,WAAd,kCCAWE,EAAa,kBACxB,qBAAKF,UAAU,SAAf,SACE,sBAAKA,UAAU,eAAf,UACE,mBAAGG,KAAK,IAAIH,UAAU,cAAtB,SACE,qBACEI,IAAI,oBACJC,IAAI,oBACJL,UAAU,WAId,cAAC,IAAD,CACEM,GAAG,IACHC,OAAK,EACLP,UAAU,qBACVQ,gBAAgB,YAJlB,kBASA,cAAC,IAAD,CACEF,GAAG,UACHN,UAAU,qBACVQ,gBAAgB,YAHlB,gC,gECrBAC,EAAW,oEAEV,SAAeC,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEAC0BC,MAAMH,GAAUI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAD5D,cACCC,EADD,yBAGEA,EAAOC,KAAI,SAACC,GAAD,mBAAC,eACdA,GADa,IAEhBC,OAAQH,EAAOI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAAOI,aAAeD,KACxDE,OAAQP,EAAOI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAAOM,aAAeH,WANrD,4C,sBCFA,IAAMI,EAAyB,kBACpC,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,8CCHOC,EAA4B,SAAC,GAAD,IAAGR,EAAH,EAAGA,OAAH,OACvC,+BACE,6BAAKA,EAAOG,OACZ,6BAAKH,EAAOS,MACZ,6BAAKT,EAAOU,OACZ,6BAAKV,EAAOW,OACZ,6BAAKX,EAAOM,aACZ,6BAAKN,EAAOI,iBCLHQ,EAAyB,SAAC,GAAD,IAAGd,EAAH,EAAGA,OAAH,OACpC,wBAAOhB,UAAU,gCAAjB,UACE,cAAC,EAAD,IACA,gCACGgB,EAAOC,KAAI,SAAAC,GAAM,OAChB,cAAC,EAAD,CAAgBA,OAAQA,GAAaA,EAAOa,eCNvCC,EAAiB,WAC5B,MAA4BC,mBAAuB,IAAnD,mBAAOjB,EAAP,KAAekB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EAAmB,uCAAG,4BAAA5B,EAAA,6DAC1ByB,GAAa,GADa,kBAIe1B,IAJf,OAIlB8B,EAJkB,OAMxBN,EAAUM,GACVJ,GAAa,GAPW,gDASxBA,GAAa,GACbE,GAAW,GAVa,yDAAH,qDAczBG,IAAeF,EAAqB,IAEpC,IAAMG,GAAyBL,IAAYF,EAE3C,OACE,qCACE,oBAAInC,UAAU,WAAd,yBAECmC,GACC,0BAAUnC,UAAU,4BAA4B2C,IAAI,MAApD,iBAGDN,GACC,oBAAIrC,UAAU,WAAd,oDAGD0C,GACC,cAAC,EAAD,CAAa1B,OAAQA,QCHd4B,EA5BC,kBACd,sBAAK5C,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,yBAASA,UAAU,UAAnB,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,0BAIA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6C,KAAK,IAAItC,OAAK,EAArB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOsC,KAAK,UAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAUvC,GAAG,IAAIuC,KAAK,UAEtB,cAAC,EAAD,gBC5BVC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.59d7769b.chunk.js","sourcesContent":["import { FC } from 'react';\n\nexport const HomePage: FC = () => (\n  <h2 className=\"subtitle\">Home page</h2>\n);\n","import { FC } from 'react';\n\nexport const NotFoundPage: FC = () => (\n  <h2 className=\"subtitle\">404: Page not found</h2>\n);\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Header: FC = () => (\n  <nav className=\"navbar\">\n    <div className=\"navbar-brand\">\n      <a href=\"/\" className=\"navbar-item\">\n        <img\n          src=\"./images/logo.png\"\n          alt=\"Mate Academy logo\"\n          className=\"logo\"\n        />\n      </a>\n\n      <NavLink\n        to=\"/\"\n        exact\n        className=\"navbar-item is-tab\"\n        activeClassName=\"is-active\"\n      >\n        Home\n      </NavLink>\n\n      <NavLink\n        to=\"/people\"\n        className=\"navbar-item is-tab\"\n        activeClassName=\"is-active\"\n      >\n        People Table\n      </NavLink>\n    </div>\n  </nav>\n);\n","import { Person, PersonFull } from './types';\n\nconst BASE_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport async function getPeople(): Promise<PersonFull[]> {\n  const people: Person[] = await fetch(BASE_URL).then(data => data.json());\n\n  return people.map((person) => ({\n    ...person,\n    father: people.find(({ name }) => person.fatherName === name),\n    mother: people.find(({ name }) => person.motherName === name),\n  }));\n}\n","import { FC } from 'react';\n\nexport const PeopleTableHeaders: FC = () => (\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Born</th>\n      <th>Died</th>\n      <th>Father</th>\n      <th>Mother</th>\n    </tr>\n  </thead>\n);\n","import { FC } from 'react';\nimport { PersonFull } from '../../services/types';\n\ninterface Props {\n  person: PersonFull;\n}\n\nexport const PeopleTableRow: FC<Props> = ({ person }) => (\n  <tr>\n    <td>{person.name}</td>\n    <td>{person.sex}</td>\n    <td>{person.born}</td>\n    <td>{person.died}</td>\n    <td>{person.motherName}</td>\n    <td>{person.fatherName}</td>\n  </tr>\n);\n","import { FC } from 'react';\nimport { PersonFull } from '../../services/types';\nimport { PeopleTableHeaders } from './PeopleTableHeaders';\nimport { PeopleTableRow } from './PeopleTableRow';\n\ninterface Props {\n  people: PersonFull[];\n}\n\nexport const PeopleTable: FC<Props> = ({ people }) => (\n  <table className=\"table is-striped people-table\">\n    <PeopleTableHeaders />\n    <tbody>\n      {people.map(person => (\n        <PeopleTableRow person={person} key={person.slug} />\n      ))}\n    </tbody>\n  </table>\n);\n","import {\n  FC, useState,\n} from 'react';\nimport useAsyncEffect from 'use-async-effect';\nimport { getPeople } from '../services/api';\nimport { PersonFull } from '../services/types';\nimport { PeopleTable } from './PeopleTable/PeopleTable';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<PersonFull[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const getPeopleFromServer = async () => {\n    setIsLoading(true);\n\n    try {\n      const peopleInfo: PersonFull[] = await getPeople();\n\n      setPeople(peopleInfo);\n      setIsLoading(false);\n    } catch {\n      setIsLoading(false);\n      setIsError(true);\n    }\n  };\n\n  useAsyncEffect(getPeopleFromServer, []);\n\n  const shouldShowPeopleTable = !isError && !isLoading;\n\n  return (\n    <>\n      <h2 className=\"subtitle\">People page</h2>\n\n      {isLoading && (\n        <progress className=\"progress is-large is-info\" max=\"100\">60%</progress>\n      )}\n\n      {isError && (\n        <h3 className=\"subtitle\">Could not load People info from server</h3>\n      )}\n\n      {shouldShowPeopleTable && (\n        <PeopleTable people={people} />\n      )}\n    </>\n  );\n};\n","// import React from 'react';\nimport {\n  Redirect, Route, Switch,\n} from 'react-router-dom';\nimport 'bulma';\n\nimport './App.scss';\nimport { FC } from 'react';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { Header } from './components/Header';\nimport { PeoplePage } from './components/PeoplePage';\n\nconst App: FC = () => (\n  <div className=\"App\">\n    <Header />\n\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title\">\n          Mate Academy\n        </h1>\n\n        <Switch>\n          <Route path=\"/\" exact>\n            <HomePage />\n          </Route>\n\n          <Route path=\"/people\">\n            <PeoplePage />\n          </Route>\n\n          <Redirect to=\"/\" path=\"/home\" />\n\n          <NotFoundPage />\n        </Switch>\n      </div>\n    </section>\n  </div>\n);\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}